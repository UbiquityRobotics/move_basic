#!/usr/bin/env python
PACKAGE = "move_basic"

import roslib; roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("min_turning_velocity",         double_t, 0, "Minimum turning velocity (when turning on spot) [rad/s]",         0.18,   0,  1.0)
gen.add("max_turning_velocity",         double_t, 0, "Maximum turning velocity (when turning on spot) [rad/s]",         1.0,    0,  4.0)
gen.add("max_lateral_velocity",         double_t, 0, "Maximum lateral velocity (when going straight) [rad/s]",          0.5,    0,  4.0)
gen.add("turning_acceleration",         double_t, 0, "Angular acceleration (when turning on spot) [rad^2/s]",           0.2,    0,  4.0)
gen.add("max_linear_velocity",          double_t, 0, "Maximum linear velocity [m/s]",                                   0.5,    0,  1.1)
gen.add("min_linear_velocity",          double_t, 0, "Minimum linear velocity [m/s]",                                   0.1,   0,  1.1)
gen.add("linear_acceleration",          double_t, 0, "Linear acceleration [m^2/s]",                                     0.1,    0,  1.1)

gen.add("angular_tolerance",            double_t, 0, "Angular tolerance [rad]",                                         0.1,    0,  0.5)
gen.add("linear_tolerance",             double_t, 0, "Linear tolerance [m]",                                            0.1,    0,  1.0)

gen.add("lateral_kp",                   double_t, 0, "Lateral P",                                                       0,    0,  100.0)
gen.add("lateral_ki",                   double_t, 0, "Lateral I",                                                       0.0,    0,  100.0)
gen.add("lateral_kd",                   double_t, 0, "Lateral D",                                                       3.0,   0,  100.0)

gen.add("localization_latency",         double_t, 0, "Delay due to slow localization rate [s]",                         0.5,    0,  1.0)

gen.add("runaway_timeout",              double_t, 0, "Driving away from goal timeout [s]",                              1.0,    0,  10.0)
gen.add("obstacle_wait_threshold",      double_t, 0, "Timeout duration waiting for obstacle to remove from path [s]",   60.0,   0,  200.0)
gen.add("forward_obstacle_threshold",   double_t, 0, "Minimum free distance in front of the robot [m]",                 0.5,    0,  3.0)
gen.add("min_side_dist",                double_t, 0, "Minimum obstacle free side distance [m]",                         0.3,    0,  5.0)
gen.add("drive_in_reverse",             bool_t, 0, "Drive in reverse?",                       							False)

exit(gen.generate(PACKAGE, "move_basic", "Movebasic"))
